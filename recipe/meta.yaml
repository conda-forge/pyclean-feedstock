{% set name = "pyclean" %}
{% set version = "3.1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/pyclean-{{ version }}.tar.gz
  sha256: d23fa900558696e08c79401c79f242fe6f7f38fd58ccd035f875a01c5bc7a6fc

build:
  entry_points:
    - pyclean = pyclean.cli:main
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0

requirements:
  host:
    - python {{ python_min }}
    - setuptools >=44
    - pip
  run:
    - python >={{ python_min }}

test:
  imports:
    - pyclean
  commands:
    - pip check
    - pyclean --help
  requires:
    - pip
    - python {{ python_min }}

about:
  home: https://github.com/bittner/pyclean
  license: GPL-3.0-or-later
  license_file: LICENSES/GPL-3.0-or-later.txt
  summary: Pure Python cross-platform pyclean. Clean up your Python bytecode.
  description: |
    Worried about `.pyc` files and `__pycache__` directories? Fear not!
    PyClean is here to help. Finally the single-command clean up for Python
    bytecode files in your favorite directories. On any platform.

    ### Usage

    ```shell
    pyclean .
    pyclean . --dry-run --verbose
    pyclean --help
    ```

    ### Clean up debris

    PyClean can clean up leftovers, generated data and temporary files from
    popular Python development tools in their default locations, along with
    Python bytecode. The following topics are currently covered:

    - Cache (general purpose folder for several tools, e.g. Python eggs,
      legacy Pytest)
    - Coverage (coverage database, and supported file formats)
    - Packaging (build files and folders)
    - Pytest (build files and folders)
    - Ruff (ruff cache folder)
    - Jupyter (notebook checkpoints) – _optional_
    - Mypy (mypy cache folder) – _optional_
    - Tox (tox environments) – _optional_

    ```shell
    pyclean . --debris
    pyclean . --debris all
    pyclean . -d jupyter -n -v
    ```

    ### Remove arbitrary file system objects

    PyClean also lets you remove free-form targets using globbing. Note that
    this is potentially dangerous: You can delete everything anywhere in the
    file system, including the entire project you’re working on. For this
    reason, the `--erase` option has a few artificial constraints:

    - It doesn’t do recursive deletion by itself, which means that you have
      to specify the directory and its contents, separately and explicitly.
    - The above entails that you’re responsible for the deletion order,
      i.e. removal of a directory will only work if you asked to delete all
      files inside first.
    - You’re prompted interactively to confirm deletion, unless you specify
      the `--yes` option, in addition.

    ```shell
    pyclean . --erase tmp/**/* tmp/
    ```
  doc_url: https://pypi.org/project/pyclean

extra:
  recipe-maintainers:
    - bittner
